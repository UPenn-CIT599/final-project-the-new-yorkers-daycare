import java.util.*;

public class Recommender {
	
	/*
	 * The Recommender class's assignRatings method takes in an ArrayList of childcare center 
	 * inspection records (DayCareProviderModel)--the most recent inspection results of 
	 * each center within the specified zip code. (This ArrayList is generated by the Genie class.)
	 * 
	 * Recommender's assignRatings method partition the centers within the specified zip code 
	 * into three groups, each stored in an ArrayList:
	 * 
	 * Green: Centers whose overall violation rate, public health hazard violation rate, and 
	 * critical violation rate ("violation rates") are all less than 
	 * the citywide average rates.
	 * 
	 * Yellow: Centers with one violation rate that is above the corresponding citywide
	 * average rate.
	 * 
	 * Red: Centers with two or more violation rates that are above the citywide average rates.
	 * 
	 * Green centers are the top recommendations within that zip code, followed by Yellow Centers.
	 * Red centers are not recommended.
	 * 
	 * A helper method, compareAgainstCityAverage, is used to enable the comparison of each
	 * center's violation rate against the city average.
	 * 
	 * This is a first pass at a recommendation algorithm and is subject to change as the
	 * project evolves.
	 * 
	 * Within the NYC Childcare Center Inspections dataset, for each inspection, each 
	 * center has the following fields:
	 * 
	 * ViolationRatePercent: the percent of initial inspections of that center that resulted
	 * in at least one public health hazard or critical violation
	 * 
	 * PublicHealthHazardViolationRate: the percent of Public Health Hazard violations 
	 * among all violations issued at initial inspections of that center during the past 3 years. 
	 * 
	 * CriticalViolationRate: the percent of Critical violations among all violations 
	 * issued at initial inspections of that center during the past 3 years.
	 * 
	 * In addition, the record for each inspection also includes the citywide average rate for
	 * each violation category. Respectively, those are:
	 * violationAvgRatePercent
	 * AveragePublicHealthHazardViolationRate
	 * AvgCriticalViolationRate
	 * 
	 * 
	 * For each violation category, we compare the center's violation rate against the citywide
	 * average.
	 * 
	 * If a center's rates are lower than the citywide average in all three categories, it gets a 
	 * "Green" rating--i.e., the best.
	 * 
	 * If a center's rates are lower than the citywide average in two categories, but higher in one,
	 * it gets a "Yellow" rating.
	 * 
	 * Otherwise, the center gets a "Red" rating.
	 * 
	 * ArrayLists corresponding to each rating tier store the centers with that rating.
	 * 
	 * Each ArrayList will then be sorted by the centers' inspection date. For example, the
	 * top recommendation will be the center in GreenCenters with the most recent inspection date.
	 * This sorting function will be handled by the sortByInspectionDate method (to be written)
	 * 
	 */
	
	private ArrayList<DayCareProviderModel> GreenCenters = new ArrayList<DayCareProviderModel>(); 
	// ArrayList to store the best childcare centers
	
	private ArrayList<DayCareProviderModel> YellowCenters = new ArrayList<DayCareProviderModel>(); 
	// ArrayList to store middle-tier childcare centers
	
	private ArrayList<DayCareProviderModel> RedCenters = new ArrayList<DayCareProviderModel>(); 
	// ArrayList to store the worst childcare centers
	
	public int compareAgainstCityAverage(double violationRate, double cityAverageRate) {
		/*
		 * This method takes in a center's violation rate for a category (overall, 
		 * public health hazard, or critical) and the citywide average rate for that
		 * category.
		 * 
		 * It returns a 1 if the center's rate is lower than the citywide average, 
		 * and a 0 if it is not.
		 */
		 
		if (violationRate < cityAverageRate) {
			return 1;
		} else {
			return 0;
		}
	}
	
	public void assignRatings(ArrayList<DayCareProviderModel> centers) {
		
		/*
		 * This method assigns ratings to each center within a zip code.
		 * For each center in the ArrayList, it compares whether
		 * 1. The center's violation rate < citywide average
		 * 2. The center's public health hazard violation rate < citywide average
		 * 3. The center's critical violation rate < citywide average
		 * 
		 * Centers that do better than the citywide average in all 3 categories
		 * are added to the GreenCenters ArrayList.
		 * 
		 * Centers that do better than the citywide average in 2 categories
		 * are added to the YellowCenters ArrayList.
		 * 
		 * All other centers are added to the RedCenters ArrayList.
		 */

		
		for (DayCareProviderModel center : centers) {
			int score = 0;
			score += compareAgainstCityAverage(center.getViolationRatePercent(), 
					center.getViolationAvgRatePercent());
			score += compareAgainstCityAverage(center.getPublicHealthHazardViolationRate(), 
					center.getAveragePublicHealthHazardViolationRate());
			score += compareAgainstCityAverage(center.getCriticalViolationRate(), 
					center.getAvgCriticalViolationRate());
			if (score == 3) {
				GreenCenters.add(center);
			} else {
				if (score == 2) {
					YellowCenters.add(center);
				} else {
					RedCenters.add(center);
				}
			}
		}

	}
	
	public void sortByInspectionDate(ArrayList<DayCareProviderModel> centers) {
		/*
		 * method to be written
		 * takes an ArrayList of centers (GreenCenters, YellowCenters, RedCenters)
		 * and sorts them by their inspection date--most recent to least recent
		 */
		Collections.sort(centers);
	}

	public ArrayList<DayCareProviderModel> getGreenCenters() {
		return GreenCenters;
	}

	public void setGreenCenters(ArrayList<DayCareProviderModel> greenCenters) {
		GreenCenters = greenCenters;
	}

	public ArrayList<DayCareProviderModel> getYellowCenters() {
		return YellowCenters;
	}

	public void setYellowCenters(ArrayList<DayCareProviderModel> yellowCenters) {
		YellowCenters = yellowCenters;
	}

	public ArrayList<DayCareProviderModel> getRedCenters() {
		return RedCenters;
	}

	public void setRedCenters(ArrayList<DayCareProviderModel> redCenters) {
		RedCenters = redCenters;
	}
	
	
	

}
